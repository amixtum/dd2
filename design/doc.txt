Dangerous Deliveries:
  Mechanics:
    The Player can move from one point to another, where each point
    contains an Obstacle that may or may not be traversable by the player.
    The player directly controls their instantaneous velocity (not position), 
    in order to better simulate running.

    Space:
      Every point has an (x, y, height) position vector

    Movement:
      Pressing a movement key (8 directional) sets the instantaneous
      velocity of the Player. Pressing the wait key sets the instantaneous
      velocity of the Player to 0.

      Only adjacent points are traversable:
        i.e. a point p is traversable iff p_x in [x - 1, x + 1],
        p_y in [y - 1, y + 1], and p_height in [height - 1, height + 1]

    Speed 
      a 2d vector that determines how much time 
      a move from one point to another takes
      A component of a Speed vector (at one timestep) is defined by:
        Speed_i_t = Speed_i_[t-1] * speed_damp + inst_i_t clamped in (-max_speed, max_speed)
        with:
          Speed_i_t = the i'th component of a Speed vector at time t
          speed_damp = a number in (0, 1) that represents a natural
                 tendency to slow down
          inst_i = i'th component of the Player's instantaneous velocity
          max_speed = a constant

    Balance (out of date: See controller/src/player_controller.rs for 
             current computations)
      A 2d vector that represents which direction the Player is leaning.
      If this vector reaches a certain length, the Player falls over.
      A component of a Balance vector is first (later we will
      define other equations that will modify the Balance vector) 
      defined by the equation:
        Balance_i_t = Balance_i_[t-1] * balance_damp       
        with:
          balance_damp = a number in (0, 1)

      The Balance vector is further modified by the equation:
        Balance_x_t += 
          sign of diff_y * 
          {[2 * mag(last_speed) * mag(inst_v) -  dot(inst_v, last_speed)] /
           2 * mag(last_speed) * mag(inst_v)} *
           turn_factor

        with:
          last_speed = Speed_[t-1]
          turn_factor = a number in (0, 1)
        and the same for Balance_y_t with x and y switched

    Falling Over:
      sets:
        Speed = (0, 0)
        Balance = (0, 0)

    Obstacles 
      affect a player's Balance, Speed and their ability to move 
      around the cartesian plane (e.g. an obstacle only allows movement in 
      one direction) All obstacles have an (x, y) position.     

      Platform:
        * x y position
        * height 
      Rail:
        * x y position
        * height
        * +/- x y direction (normal vectors)
        * Either
          1. moving onto the rail "grinds" the rail,
            * moves the Player along the rail, dampening the other
              axes of their Speed
          2. Moving onto the rail only adds speed in the direction of
             the rail. The player can only "grind" a rail by moving
             in its direction. They will have to take into
             account the rail's contribution to their speed
             in order to effectively use it to navigate.
             
        * while grinding the rail
          * if a player's speed reaches (0, 0) they fall off the rail
            onto the nearest platform
        Wall:
          * x y position
          * bumping into a wall makes the player fall over
